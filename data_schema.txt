-- Crear la base de datos
CREATE DATABASE IF NOT EXISTS `gastro-app_db` DEFAULT CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci;
USE `gastro-app_db`;

-- 1. Tabla de Categorías del Menú
CREATE TABLE IF NOT EXISTS MenuCategories (
    category_id INT AUTO_INCREMENT PRIMARY KEY COMMENT 'Unique identifier for each category',
    name VARCHAR(100) NOT NULL UNIQUE COMMENT 'Name of the category (e.g., Appetizer, Pizza)'
);

-- Insertar categorías en inglés
INSERT INTO MenuCategories (name) VALUES 
('Appetizer'), ('Pizza'), ('Pasta'), ('Dessert'), ('Drink');

-- 2. Tabla de Platos del Menú
CREATE TABLE IF NOT EXISTS Menu (
    dish_id INT AUTO_INCREMENT PRIMARY KEY COMMENT 'Unique identifier for each dish',
    name VARCHAR(255) NOT NULL COMMENT 'Name of the dish',
    category_id INT NOT NULL COMMENT 'Foreign key to MenuCategories',
    unit_price DECIMAL(10,2) NOT NULL COMMENT 'Price of the dish',
    FOREIGN KEY (category_id) REFERENCES MenuCategories(category_id)
);

-- Insertar platos de ejemplo
INSERT INTO Menu (name, category_id, unit_price) VALUES
('Bruschetta', 1, 5.00),
('Pizza Margherita', 2, 9.50),
('Pasta Carbonara', 3, 10.00),
('Tiramisu', 4, 4.50),
('Lemonade', 5, 2.00);

-- 3. Tabla de Pedidos
CREATE TABLE IF NOT EXISTS Orders (
    order_id INT AUTO_INCREMENT PRIMARY KEY COMMENT 'Unique identifier for each order',
    order_time TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP COMMENT 'Timestamp when order was placed',
    payment_time TIMESTAMP NULL COMMENT 'Timestamp when order was paid',
    time_to_payment INT GENERATED ALWAYS AS (
        IF(payment_time IS NOT NULL, TIMESTAMPDIFF(SECOND, order_time, payment_time), NULL)
    ) STORED COMMENT 'Time in seconds between order_time and payment_time',
    consumption_date DATE NOT NULL COMMENT 'Date the order was consumed',
    total_price DECIMAL(10,2) NOT NULL COMMENT 'Total price of the order'
);

-- 4. Tabla de Platos por Pedido con consistencia histórica y claves foráneas
CREATE TABLE IF NOT EXISTS OrderDishes (
    order_id INT COMMENT 'Foreign key to Orders',
    dish_id INT COMMENT 'Foreign key to Menu (dish reference)',
    ordered_name VARCHAR(255) NOT NULL COMMENT 'Name of the dish at the time of order',
    ordered_category_id INT NOT NULL COMMENT 'Category ID at time of order',
    ordered_unit_price DECIMAL(10,2) NOT NULL COMMENT 'Unit price at time of order',
    quantity INT NOT NULL COMMENT 'Quantity of the dish ordered',
    PRIMARY KEY (order_id, dish_id),
    FOREIGN KEY (order_id) REFERENCES Orders(order_id),
    FOREIGN KEY (dish_id) REFERENCES Menu(dish_id),
    FOREIGN KEY (ordered_category_id) REFERENCES MenuCategories(category_id)
);

-- Insertar pedido de prueba
INSERT INTO Orders (order_time, payment_time, consumption_date, total_price)
VALUES ('2025-04-17 13:00:00', '2025-04-17 13:07:15', '2025-04-17', 26.50);

-- Insertar platos del pedido con información histórica preservada
INSERT INTO OrderDishes (order_id, dish_id, ordered_name, ordered_category_id, ordered_unit_price, quantity) VALUES
(1, 1, 'Bruschetta', 1, 5.00, 1),
(1, 2, 'Pizza Margherita', 2, 9.50, 1),
(1, 3, 'Pasta Carbonara', 3, 10.00, 1),
(1, 5, 'Lemonade', 5, 2.00, 1);

-- 5. Indexes para rendimiento
CREATE INDEX idx_orders_consumption_date ON Orders (consumption_date);
CREATE INDEX idx_orderdishes_dish_id ON OrderDishes (dish_id);
CREATE INDEX idx_menu_category_id ON Menu (category_id);